class Solution {
    public int longestCommonSubsequence(String text1, String text2) {
        int m = text1.length();
        int n = text2.length();
        int dp[][] = new int[m+1][n+1];
        return lcs(text1,text2,m,n,dp);
    }
    public int lcs(String text1, String text2,int m,int n,int dp[][])
    {
        for(int i=1;i<=m;i++)
        {
            for(int j=1;j<=n;j++)
            {
                if(text1.charAt(i-1)==text2.charAt(j-1))
                {
                    dp[i][j] = dp[i-1][j-1]+1;
                }
                else
                {
                    dp[i][j] = Math.max(dp[i-1][j],dp[i][j-1]);
                }
            }
        }
        return dp[m][n];
    }
}


/*
class Solution {
    // Tabulation (DP) #9 ms
    public int longestCommonSubsequence(String text1, String text2) {
        int n = text1.length();
        int m = text2.length();
        
        int[][] dp = new int[n + 1][m + 1];
        
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= m; j++) {
                if (text1.charAt(i -1) == text2.charAt(j - 1)) {
                    dp[i][j] = 1 + dp[i - 1][j - 1];
                } else {
                     dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);
                }
            }
        }
        
        
        return dp[n][m];
    }
    
    // Memoization (DP) using Matrix #15 ms
    int lcsDP(String text1, String text2, int n, int m, int[][] dp) {
        // base case
        if (n == 0 || m == 0)
            return 0;
        
        if (dp[n][m] != -1)
            return dp[n][m];
        
        int lcs = 0;
        if (text1.charAt(n - 1) == text2.charAt(m - 1)) {
            lcs = 1 + lcsDP(text1, text2, n - 1, m - 1, dp);
        } else {
            lcs = Math.max(lcsDP(text1, text2, n - 1, m, dp), lcsDP(text1, text2, n, m - 1, dp));
        }
        
        return dp[n][m] = lcs;
    }
    
    
    // Memoization (DP) using Map #247 ms
    int lcsDP(String text1, String text2, int n, int m, Map<String, Integer> map) {
        // base case
        if (n == 0 || m == 0)
            return 0;
        
        String key = n + "," + m;
        
        if (map.containsKey(key))
            return map.get(key);
        
        int lcs = 0;
        if (text1.charAt(n - 1) == text2.charAt(m - 1)) {
            lcs = 1 + lcsDP(text1, text2, n - 1, m - 1, map);
        } else {
            lcs = Math.max(lcsDP(text1, text2, n - 1, m, map), lcsDP(text1, text2, n, m - 1, map));
        }
        
        map.put(key, lcs);
        
        return lcs;
    }
    
    // Recursive #TLE
    int lcs(String text1, String text2, int n, int m) {
        if (n == 0 || m == 0)
            return 0;
        
        if (text1.charAt(n - 1) == text2.charAt(m - 1))
            return 1 + lcs(text1, text2, n - 1, m - 1);
        
        return Math.max(lcs(text1, text2, n - 1, m), lcs(text1, text2, n, m - 1));
    }
    
    
}
*/
