//https://www.geeksforgeeks.org/problems/print-a-binary-tree-in-vertical-order/0
class Solution
{
    //Function to find the vertical order traversal of Binary Tree.
    static ArrayList <Integer> verticalOrder(Node root)
    {
        Queue<Pair> q = new ArrayDeque<>();
        Map<Integer,ArrayList<Integer>> map =new TreeMap<>();
        q.add(new Pair(0,root));
        while(!q.isEmpty())
        {
            Pair curr=q.poll();
            if(map.containsKey(curr.hd))
            {
                map.get(curr.hd).add(curr.node.data);
            }
            else
            {
                ArrayList<Integer> temp = new ArrayList<>();
                temp.add(curr.node.data);
                map.put(curr.hd,temp);
            }
            if(curr.node.left!=null)
            {
                q.add(new Pair(curr.hd-1,curr.node.left));
            }
            if(curr.node.right!=null)
            {
                q.add(new Pair(curr.hd+1,curr.node.right));
            }
        }
        //ArrayList<Integer> ans = new ArrayList<>(map.Values());
        ArrayList<Integer> ans = new ArrayList<>();
        for(Map.Entry<Integer,ArrayList<Integer>> entry:map.entrySet())
        {
            ans.addAll(entry.getValue());
        }
        return ans;
        
        
    }
    static class Pair
    {
        int hd;
        Node node;
        Pair(int hd,Node node)
        {
            this.hd = hd;
            this.node = node;
        }
    }
}
/*

 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */ //leetcode my solution
class Solution {
    public List<List<Integer>> verticalTraversal(TreeNode root) {
        Queue<Pair> q = new ArrayDeque<>();
        Map<Integer,ArrayList<Integer>> map =new TreeMap<>();
        q.add(new Pair(0,root));
        while(!q.isEmpty())
        {
            Pair curr=q.poll();
            if(map.containsKey(curr.hd))
            {
                map.get(curr.hd).add(curr.node.val);
            }
            else
            {
                ArrayList<Integer> temp = new ArrayList<>();
                temp.add(curr.node.val);
                map.put(curr.hd,temp);
            }
            if(curr.node.left!=null)
            {
                q.add(new Pair(curr.hd-1,curr.node.left));
            }
            if(curr.node.right!=null)
            {
                q.add(new Pair(curr.hd+1,curr.node.right));
            }
        }
        //ArrayList<Integer> ans = new ArrayList<>(map.Values());
        List<List<Integer>> ans = new ArrayList<>();
        // for(Map.Entry<Integer,List<Integer>> entry:map.entrySet())
        // {
        //     ans.add(entry.getValue());
        // }
        // List<Integer> temp = new ArrayList<>();
        for(List<Integer> l:map.values())
        {
            ans.add(l);
        }
        return ans;
    }
    static class Pair
    {
        int hd;
        TreeNode node;
        Pair(int hd,TreeNode node)
        {
            this.hd = hd;
            this.node = node;
        }
    }
*/
/*
easy solution
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class NodeDistance {
    
    int dist;
    TreeNode node;
    NodeDistance(int dist, TreeNode node) {
        this.dist = dist;
        this.node = node;
    }
}
class Solution {
    public List<List<Integer>> verticalTraversal(TreeNode root) {
        
        if(root == null) {
            return new ArrayList<>();
        }
        
        TreeMap<Integer, List<Integer>>  distanceMap = new TreeMap<>();
        Queue<NodeDistance> q = new LinkedList<>();
        q.add(new NodeDistance(0, root));
        
        //Level order traversal
        while(!q.isEmpty()) {
            
            int size = q.size();
            HashMap<Integer, List<Integer>> levelMap = new HashMap<>();
            while(size-- > 0) {
                
                NodeDistance current = q.poll();
                int distance = current.dist;
                List<Integer> nodeList = levelMap.getOrDefault(distance, new ArrayList<>());
                nodeList.add(current.node.val);
                Collections.sort(nodeList);
                levelMap.put(distance, new ArrayList<>(nodeList));
                
                if(current.node.left != null) {
                    q.add(new NodeDistance(distance-1, current.node.left));
                }
                
                 if(current.node.right != null) {
                    q.add(new NodeDistance(distance+1, current.node.right));
                }
                
            }
			
            //Update the distanceMap with levelMap values
            for(Map.Entry<Integer,List<Integer>> entry : levelMap.entrySet()) {
                
                List<Integer> nodeList = distanceMap.getOrDefault(entry.getKey(), new ArrayList<>());
                nodeList.addAll(entry.getValue());
                distanceMap.put(entry.getKey(), nodeList);
                
            }
        }
        
        return new ArrayList<>(distanceMap.values());
        
    }
}
*/
